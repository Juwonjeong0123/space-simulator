# ====================
# 라이브러리
# ====================
import math
import matplotlib.pyplot as plt

# ====================
#   상수
# ====================
G = 6.674e-11

# ====================
#   class
# ====================
class Vector2:
    def __init__(self, x, y):
        self.x = float(x)
        self.y = float(y)

    # 벡터 길이
    def magnitude(self):
        return math.sqrt((self.x ** 2) + (self.y ** 2))

    # add
    def __add__(self, other):
        new_x = self.x + other.x
        new_y = self.y + other.y
        return Vector2(new_x, new_y)

    # sub
    def __sub__(self, other):
        new_x = self.x - other.x
        new_y = self.y - other.y
        return Vector2(new_x, new_y)

    def __mul__(self, k):
        new_x = self.x * k
        new_y = self.y * k
        return Vector2(new_x, new_y)

    def __rmul__(self, k):
        new_x = self.x * k
        new_y = self.y * k
        return Vector2(new_x, new_y)

    """def __pow__(self, exp):
        new_x = self.x ** exp
        new_y = self.y ** exp
        return Vector2(new_x, new_y)"""

    def __truediv__(self, k):
        new_x = self.x / k
        new_y = self.y / k
        return Vector2(new_x, new_y)

    def normalize(self):
        mag = self.magnitude()
        if mag == 0:
            return Vector2(0, 0) # 크기가 0이면 0벡터 반환
        return Vector2(self.x / mag, self.y / mag)


class CelestialBody:
    def __init__(self, name, mass, radius, pos, v, color):
        self.name = name
        self.mass = mass
        self.radius = radius
        self.pos = pos
        self.v = v
        self.color = color

def force(c1, c2):
    r_vec = c2.pos - c1.pos # 두 물체 간의 거리 벡터
    r = r_vec.magnitude()
    if r == 0:
        return Vector2(0, 0)
    
    force_magnitude = (G * c1.mass * c2.mass) / (r ** 2)
    unit_vector = r_vec.normalize()
    
    return unit_vector * force_magnitude # 힘 벡터를 반환

def acceleration(c, F_vec):
    a = F_vec / c.mass
    return a

def new_u(c, a, dt):
    u = c.v + a * dt
    return u

def new_pos(c, u, dt):
    pos = c.pos + u * dt
    return pos

dt = 0.001

sun = CelestialBody("sun", 1.989e30, 1392684, Vector2(0, 0), Vector2(0, 0), "red")

earth_pos = Vector2(149.6e9, 0) # 초기 위치 (x축)
earth_vel = Vector2(0, 29.8e3)  # 초기 속도 (y축)

earth = CelestialBody("earth", 5.9722e24, 12756, earth_pos, earth_vel, "blue")

def update():
    F = force(earth, sun)
    earth_a = acceleration(earth, F)
    earth.v = earth.v + earth_a * dt
    earth.pos = earth.pos + earth.v * dt
    
    print(earth.pos.x, earth.pos.y)

for i in range(30):
    update()

# """
